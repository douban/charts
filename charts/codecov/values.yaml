# Default values for codecov.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

codecov_host: "codecov.example.com"

codecov_scheme: https

codecov_config: |
  # please read https://docs.codecov.io/docs/configuration to have further understanding
  # if there's anything secret needs to set, please use envrinment variable
  # https://docs.codecov.com/docs/configuration#overview
  setup:
    # Replace with the http location of your Codecov
    # https://docs.codecov.io/docs/configuration#section-codecov-url
    # do not set codecov_url 
    # codecov_url: http://turin1.intra.douban.com:8081
    #codecov_api_url: <codecov-url> # this defaults to <codecov-url> and is designed to work out of the box like this
    #api_allowed_hosts: [] # this defaults to <codecov-url> and is designed to work out of the box like this
    # Replace with your Codecov Enterprise License key. This is required for the containers to function.
    # https://docs.codecov.io/docs/configuration#section-enterprise-license
    enterprise_license: "F5O0Fu5ASFTPtWXM51BK8YQlq7IM2s+8TBGULrf9Um7wHjfPwI+Z3E4PfF/dPs6Uc5A+MLti+2etHq5dnFEfZgoiIVCLZ8x+0BVmUSWwPS42vJXnf1veY9Bglang4mDIhmfWfp5l6AT6cxmAVFpGrwobiK6OcN9pjWx4iWabazmsOiF9LM++v0WtuHNvhgzRcKmnJPgqahEB7qqF6KQ1hg=="
    # https://docs.codecov.com/docs/configuration#instance-wide-admins
    admins:
      - service: github
        username: "LeoQuote"
    # Replace with a random string
    # https://docs.codecov.io/docs/configuration#section-cookie-secret
    http:
      cookie_secret: "some-random-string"
    timeseries:
      enabled: true
  github:
    client_id: "Iv1.42f4f7d056e37182"
    client_secret: "secretxxx"
    # global_upload_token: "<upload-token>"
    webhook_secret: "verysecret"
    intergration:
      id: 22
      pem: /config/file.pem
# If using external storage. Comment above and uncomment below
#    host: s3.amazonaws.com or storage.googleapis.com if using GCS
#    bucket: <bucket-name>
#    region: <bucket-region>
#    verify_ssl: true
#    port: 443
#    access_key_id: <aws-iam-access-key> # or <gcs-hmac-key> if using GCS
#    secret_access_key: <aws-iam-secret> # or <gcs-hmac-secret> if using GCS
#    iam_auth: <boolean, default false> # set to true in AWS to attempt to authenticate via Instance role

# the following extra configs would be injected into:
# * api
# * worker
extraEnvs: []

volumes: []

volumeMounts: []

nameOverride: ""
fullnameOverride: ""

ingress:
  enabled: false
  className: ""
  annotations:
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

frontend:
  replicaCount: 1

  image:
    repository: codecov/enterprise-frontend
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: ""

  imagePullSecrets: []

  podAnnotations: {}

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  service:
    type: ClusterIP
    port: 80
  
  containerPort: 8000


  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  nodeSelector: {}

  tolerations: []

  affinity: {}

api:
  replicaCount: 1

  image:
    repository: codecov/enterprise-api
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: ""

  imagePullSecrets: []

  podAnnotations: {}

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  service:
    type: ClusterIP
    port: 80

  containerPort: 8000

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  nodeSelector: {}

  tolerations: []

  affinity: {}

worker:
  replicaCount: 1

  image:
    repository: codecov/enterprise-worker
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: ""

  imagePullSecrets: []

  podAnnotations: {}

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000


  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  nodeSelector: {}

  tolerations: []

  affinity: {}

gateway:
  replicaCount: 1

  image:
    repository: codecov/enterprise-gateway
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: ""

  imagePullSecrets: []

  podAnnotations: {}

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  service:
    type: ClusterIP
    port: 80

  containerPort: 8080


  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  nodeSelector: {}

  tolerations: []

  affinity: {}


##### dependencies #####

redis:
  # using embedded redis
  # connection info would be set automatically
  # best to use external redis if you have one
  embedded: true
  # embedded: false
  # url: "redis://127.0.0.1:6379/0"
  # urlSecret: ""
  # urlSecretKey: "CACHE_URL"
  # please consult to chart manual if you want to change it.
  # https://artifacthub.io/packages/helm/bitnami/redis
  architecture: standalone
  auth:
    password: "REDIS_PASSWORD"
  master:
    persistence:
      enabled: false
      size: 8Gi

postgresql:
  # using embedded redis
  # connection info would be set automatically
  # best to use external redis if you have one
  # setting embedded to false and set redis url in envrionment variable
  embedded: true
  # embedded: false
  # url: "postgres://postgres:testpassword@postgres:5432/postgres"
  # urlSecret: ""
  # urlSecretKey: "CACHE_URL"
  architecture: standalone
  auth:
    postgresPassword: "testpassword"
    database: "codecov"
  primary:
    persistence:
      enabled: false

timescaledb:
  enabled: false
  # timescaledb is not enabled by default, it is actually not working, pr are welcome
  # it is recommended to use external timescaledb as the helm chart using proviode timescaledb with tls support
  # which is currently not supported by codecov
  # enable means that the timescaledb would be embedded in the chart
  # you can set to false and provide your own
  # enabled: false
  # url:  "postgres://postgres:testpassword@timescale:5432/postgres"
  # urlSecret: ""
  # urlSecretKey: "CACHE_URL"
  fullnameOverride: "timescale-codecov"
  image:
  # Image was built from
  # https://github.com/timescale/timescaledb-docker-ha
    repository: timescale/timescaledb-ha
    tag: pg14.6-ts2.8.1-patroni-static-primary-latest
    pullPolicy: IfNotPresent
  secrets:
    # This map should contain environment variables that influence Patroni,
    # for example PATRONI_SUPERUSER_PASSWORD or PATRONI_REPLICATION_PASSWORD
    # https://patroni.readthedocs.io/en/latest/ENVIRONMENT.html#postgresql
    credentials:
      PATRONI_SUPERUSER_PASSWORD: "testpassword"
  # disable ssl as codecov does not support it
  patroni:
    bootstrap:
      dcs:
        postgresql:
          parameters:
            ssl: 'off'

      pg_hba:
        - local     all             postgres                              peer
        - local     all             all                                   md5
        - hostnossl all,replication all                all                md5 # reject
        - hostssl   all             all                127.0.0.1/32       md5
        - hostssl   all             all                ::1/128            md5
        - hostssl   replication     standby            all                md5
        - hostssl   all             all                all                md5
  persistentVolumes:
    data:
      enabled: false
    wal:
      enabled: false


minio:
  embedded: true
  # embedded: false
  # externalMinio:
# If using external storage. Comment above and uncomment below
#    host: s3.amazonaws.com or storage.googleapis.com if using GCS
#    bucket: <bucket-name>
#    region: <bucket-region>
#    verify_ssl: true
#    port: 443
#    access_key_id: <aws-iam-access-key> # or <gcs-hmac-key> if using GCS
#    secret_access_key: <aws-iam-secret> # or <gcs-hmac-secret> if using GCS
#    iam_auth: <boolean, default false> # set to true in AWS to attempt to authenticate via Instance role
  auth:
    rootUser: minioadmin
    rootPassword: minioadmin
  persistence:
    enabled: false

