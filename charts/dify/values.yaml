# Default values for dify.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.


# volume and volumeMounts would be injected to api and worker
volumes: []

volumeMounts: []

nameOverride: ""
fullnameOverride: ""

global:
  host: "chart-example.local"
  # Change this is your ingress is exposed with port other than 443, 80, like 8080 for instance
  port: ""
  enableTLS: false
  image:
    tag: ""
  edition: "SELF_HOSTED"
  # the following extra configs would be injected into:
  # * frontend
  # * api
  # * worker
  extraEnvs: []

  # the following extra configs would be injected into:
  # * api
  # * worker
  extraBackendEnvs:
  # SECRET_KEY is a must, check https://docs.dify.ai/getting-started/install-self-hosted/environments#secret_key for detail
  # read more on the readme page for secret ref
  - name: SECRET_KEY
    value: "PleaseReplaceThisToYourSecretOrUse"
  # use secretRef to protect your secret
  # - name: SECRET_KEY
  #   valueFrom:
  #     secretKeyRef:
  #       name: dify
  #       key: SECRET_KEY

ingress:
  enabled: false
  className: ""
  annotations:
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  tlsSecretName: "dify-tls"

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

frontend:
  replicaCount: 1

  image:
    repository: langgenius/dify-web
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: ""

  envs: []
  imagePullSecrets: []

  podAnnotations: {}

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  service:
    type: ClusterIP
    port: 80

  containerPort: 3000


  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  nodeSelector: {}

  tolerations: []

  affinity: {}
  livenessProbe:
    httpGet:
      path: /apps
      port: http
      httpHeaders:
      - name: accept-language
        value: en
    initialDelaySeconds: 3
    timeoutSeconds: 5
    periodSeconds: 30
    successThreshold: 1
    failureThreshold: 2
  readinessProbe:
    httpGet:
      path: /apps
      port: http
      httpHeaders:
      - name: accept-language
        value: en
    initialDelaySeconds: 3
    timeoutSeconds: 5
    periodSeconds: 30
    successThreshold: 1
    failureThreshold: 2


api:
  replicaCount: 1

  image:
    repository: langgenius/dify-api
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: ""
  envs:
  # sandbox
  - name: CODE_MAX_NUMBER
    value: "9223372036854775807"
  - name: CODE_MIN_NUMBER
    value: "-9223372036854775808"
  - name: CODE_MAX_STRING_LENGTH
    value: "80000"
  - name: TEMPLATE_TRANSFORM_MAX_LENGTH
    value: "80000"
  - name: CODE_MAX_STRING_ARRAY_LENGTH
    value: "30"
  - name: CODE_MAX_OBJECT_ARRAY_LENGTH
    value: "30"
  - name: CODE_MAX_NUMBER_ARRAY_LENGTH
    value: "1000"
  imagePullSecrets: []

  podAnnotations: {}

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  service:
    type: ClusterIP
    port: 80

  containerPort: 5001

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  nodeSelector: {}

  tolerations: []

  affinity: {}

  livenessProbe:
    httpGet:
      path: /health
      port: http
    initialDelaySeconds: 30
    timeoutSeconds: 5
    periodSeconds: 30
    successThreshold: 1
    failureThreshold: 2
  readinessProbe:
    httpGet:
      path: /health
      port: http
    initialDelaySeconds: 10
    timeoutSeconds: 5
    periodSeconds: 5
    successThreshold: 1
    failureThreshold: 10

worker:
  replicaCount: 1

  image:
    repository: langgenius/dify-api
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: ""

  imagePullSecrets: []

  podAnnotations: {}

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000


  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  nodeSelector: {}

  tolerations: []

  affinity: {}

  # livenessprobe for worker, default no probe
  livenessProbe: {}
  readinessProbe: {}

sandbox:
  replicaCount: 1
  # please change to avoid abuse
  apiKey: "dify-sandbox"
  # prefer to use secret
  apiKeySecret: ""
  image:
    repository: langgenius/dify-sandbox
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: ""

  envs:
  - name: GIN_MODE
    value: "release"
  - name: WORKER_TIMEOUT
    value: "15"
  imagePullSecrets: []

  podAnnotations: {}

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  service:
    type: ClusterIP
    port: 80

  containerPort: 8194


  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  nodeSelector: {}

  tolerations: []

  affinity: {}


  readinessProbe:
    tcpSocket:
      port: http
    initialDelaySeconds: 1
    timeoutSeconds: 5
    periodSeconds: 5
    successThreshold: 1
    failureThreshold: 10
  livenessProbe:
    tcpSocket:
      port: http
    initialDelaySeconds: 30
    timeoutSeconds: 5
    periodSeconds: 30
    successThreshold: 1
    failureThreshold: 2

##### dependencies #####

redis:
  # using embedded redis
  # connection info would be set automatically
  # best to use external redis if you have one
  embedded: true
  # embedded: false
  # url: "redis://127.0.0.1:6379/0"
  # urlSecret: ""
  # urlSecretKey: "CACHE_URL"
  # please consult to chart manual if you want to change it.
  # https://artifacthub.io/packages/helm/bitnami/redis
  architecture: standalone
  auth:
    password: "REDIS_PASSWORD"
  master:
    persistence:
      enabled: false
      size: 8Gi

postgresql:
  # using embedded postgresql
  # connection info would be set automatically
  # best to use external pg if you have one
  # setting embedded to false and set pg url in envrionment variable
  embedded: true
  # embedded: false
  # goto extraBackendEnvs to set pg url
  architecture: standalone
  auth:
    postgresPassword: "testpassword"
    database: "dify"
  primary:
    persistence:
      enabled: false

minio:
  embedded: false
  # externalHost: "minio.example.com"
  # externalPort: "443"
  # embedded minio is not supported
  # dify needs a external available minio
  # please use external minio
  # pr are welcomed
  # embedded: false
  # externalMinio:
# If using external storage. Comment above and uncomment below
#    host: s3.amazonaws.com or storage.googleapis.com if using GCS
#    bucket: <bucket-name>
#    region: <bucket-region>
#    verify_ssl: true
#    port: 443
#    access_key_id: <aws-iam-access-key> # or <gcs-hmac-key> if using GCS
#    secret_access_key: <aws-iam-secret> # or <gcs-hmac-secret> if using GCS
#    iam_auth: <boolean, default false> # set to true in AWS to attempt to authenticate via Instance role
  auth:
    rootUser: minioadmin
    rootPassword: minioadmin
  defaultBuckets: "dify"
  persistence:
    enabled: false
